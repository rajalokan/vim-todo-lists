
command! -range -nargs=0 Strikethrough   call s:CombineSelection(<line1>, <line2>, '0336')

function! s:CombineSelection(line1, line2, cp)
  execute 'let char = "\u'.a:cp.'"'
  execute a:line1.','.a:line2.'s/\%V[^[:cntrl:]]/&'.char.'/ge'
endfunction

" Initializes plugin settings and mappings
function! VimTodoListsInit()
  set filetype=todo
  set foldlevel=0
  set nonumber
  set norelativenumber
  setlocal tabstop=2
  setlocal shiftwidth=2 expandtab
  setlocal cursorline
  setlocal noautoindent
  colorscheme todo

  noremap <Up> <NOP>
  noremap <Down> <NOP>
  noremap <Left> <NOP>
  noremap <Right> <NOP>
  
  noremap h <NOP>
  noremap l <NOP>

  nnoremap h zc
  nnoremap l zo
  
  nmap <leader>t-1 :vs yesterday.todo<cr>
  nmap <leader>t1 :vs tomorrow.todo<cr>
  nmap <leader>later :vs later.todo<cr>
  nmap <leader>wish :vs wishlist.todo<cr>

  if exists('g:VimTodoListsCustomKeyMapper')
    try
      call call(g:VimTodoListsCustomKeyMapper, [])
    catch
      echo 'VimTodoLists: Error in custom key mapper.'
           \.' Falling back to default mappings'
      call VimTodoListsSetItemMode()
    endtry
  else
    call VimTodoListsSetItemMode()
  endif

endfunction



" Checks that item is not done
function! VimTodoListsItemIsNotMarked(line)
  if match(a:line, '^\s*\[ \].*') != -1
    return 1
  endif

  return 0
endfunction

" Returns the line number of the brother item in specified range
function! VimTodoListsBrotherItemInRange(line, range)
  let l:indent = VimTodoListsCountLeadingSpaces(getline(a:line))
  let l:result = -1

  for current_line in a:range
    if VimTodoListsLineIsItem(getline(current_line)) == 0
      break
    endif

    if (VimTodoListsCountLeadingSpaces(getline(current_line)) == l:indent)
      let l:result = current_line
      break
    elseif (VimTodoListsCountLeadingSpaces(getline(current_line)) > l:indent)
      continue
    else
      break
    endif
  endfor

  return l:result
endfunction


" Finds the insert position above the item
function! VimTodoListsFindTargetPositionUp(lineno)
  let l:range = range(a:lineno, 1, -1)
  let l:candidate_line = VimTodoListsBrotherItemInRange(a:lineno, l:range)
  let l:target_line = -1

  while l:candidate_line != -1
    let l:target_line = l:candidate_line
    let l:candidate_line = VimTodoListsBrotherItemInRange(
      \ l:candidate_line, range(l:candidate_line - 1, 1, -1))

    if l:candidate_line != -1 &&
      \ VimTodoListsItemIsNotDone(getline(l:candidate_line)) == 1
      let l:target_line = l:candidate_line
      break
    endif
  endwhile

  return VimTodoListsFindLastChild(l:target_line)
endfunction


" Finds the insert position below the item
function! VimTodoListsFindTargetPositionDown(line)
  let l:range = range(a:line, line('$'))
  let l:candidate_line = VimTodoListsBrotherItemInRange(a:line, l:range)
  let l:target_line = -1

  while l:candidate_line != -1
    let l:target_line = l:candidate_line
    let l:candidate_line = VimTodoListsBrotherItemInRange(
      \ l:candidate_line, range(l:candidate_line + 1, line('$')))
  endwhile

  return VimTodoListsFindLastChild(l:target_line)
endfunction


" Moves the item subtree to the specified position
function! VimTodoListsMoveSubtree(lineno, position)
  if exists('g:VimTodoListsMoveItems')
    if g:VimTodoListsMoveItems != 1
      return
    endif
  endif

  let l:subtree_length = VimTodoListsFindLastChild(a:lineno) - a:lineno + 1

  let l:cursor_pos = getcurpos()
  call cursor(a:lineno, l:cursor_pos[4])

  " Update cursor position
  let l:cursor_pos[1] = a:lineno

  " Copy subtree to the required position
  execute 'normal! ' . l:subtree_length . 'Y'
  call cursor(a:position, l:cursor_pos[4])

  if a:lineno < a:position
    execute 'normal! p'
    " In case of moving item down cursor should be returned to exact position
    " where it was before
    call cursor(l:cursor_pos[1], l:cursor_pos[4])
  else
    let l:indent = VimTodoListsCountLeadingSpaces(getline(a:lineno))

    if VimTodoListsItemIsDone(getline(a:position)) &&
       \ (VimTodoListsCountLeadingSpaces(getline(a:position)) == l:indent)
      execute 'normal! P'
    else
      execute 'normal! p'
    endif

    " In case of moving item up the text became one longer by a subtree length
    call cursor(l:cursor_pos[1] + l:subtree_length, l:cursor_pos[4])
  endif

  " Delete subtree in the initial position
  execute 'normal! ' . l:subtree_length . 'dd'

endfunction


" Moves the subtree up
function! VimTodoListsMoveSubtreeUp(lineno)
  let l:move_position = VimTodoListsFindTargetPositionUp(a:lineno)

  if l:move_position != -1
    call VimTodoListsMoveSubtree(a:lineno, l:move_position)
  endif
endfunction


" Moves the subtree down
function! VimTodoListsMoveSubtreeDown(lineno)
  let l:move_position = VimTodoListsFindTargetPositionDown(a:lineno)

  if l:move_position != -1
    call VimTodoListsMoveSubtree(a:lineno, l:move_position)
  endif
endfunction



" Returns the line number of the parent
function! VimTodoListsFindParent(lineno)
  let l:indent = VimTodoListsCountLeadingSpaces(getline(a:lineno))
  let l:parent_lineno = -1

  for current_line in range(a:lineno, 1, -1)
    if (VimTodoListsLineIsItem(getline(current_line)) &&
      \ VimTodoListsCountLeadingSpaces(getline(current_line)) < l:indent)
      let l:parent_lineno = current_line
      break
    endif
  endfor

  return l:parent_lineno
endfunction



" Sets mapping for normal navigation and editing mode
function! VimTodoListsSetNormalMode()
  nunmap <buffer> o
  nunmap <buffer> O
  nunmap <buffer> j
  nunmap <buffer> k
  nnoremap <buffer> <leader>td :VimTodoListsToggleItemDone<CR>
  vnoremap <buffer> <leader>td :'<,'>VimTodoListsToggleItemDone<CR>
  nnoremap <buffer> <leader>tl:VimTodoListsToggleItemLater<CR>
  vnoremap <buffer> <leader>tl :'<,'>VimTodoListsToggleItemLater<CR>
  nnoremap <buffer> <leader>tw:VimTodoListsToggleItemWishlist<CR>
  vnoremap <buffer> <leader>tw :'<,'>VimTodoListsToggleItemWishlist<CR>
  nnoremap <buffer> <leader>tn:VimTodoListsToggleItemNotes<CR>
  vnoremap <buffer> <leader>tn :'<,'>VimTodoListsToggleItemNotes<CR>
  nnoremap <buffer> <leader>t?:VimTodoListsToggleItemQuestion<CR>
  vnoremap <buffer> <leader>t? :'<,'>VimTodoListsToggleItemQuestion<CR>
  nnoremap <buffer> <leader>t>:VimTodoListsToggleItemTomorrow<CR>
  vnoremap <buffer> <leader>t> :'<,'>VimTodoListsToggleItemTomorrow<CR>
  noremap <buffer> <leader>e :silent call VimTodoListsSetItemMode()<CR>
endfunction


" Sets mappings for faster item navigation and editing
function! VimTodoListsSetItemMode()
  nnoremap <buffer> j :VimTodoListsGoToNextItem<CR>
  nnoremap <buffer> k :VimTodoListsGoToPreviousItem<CR>
  nnoremap <buffer> o :VimTodoListsCreateNewItemBelow<CR>
  nnoremap <buffer> O :VimTodoListsCreateNewItemAbove<CR>

  nnoremap <buffer> <leader>lw :VimTodoListsSetLabelWork<CR>
  nnoremap <buffer> <leader>lo :VimTodoListsSetLabelOSS<CR>
  nnoremap <buffer> <leader>lp :VimTodoListsSetLabelPersonal<CR>
  nnoremap <buffer> <leader>lh :VimTodoListsSetLabelHousehold<CR>

  nnoremap <buffer> <leader>to :VimTodoListsCreateEmptyLineBelow<CR>
  nnoremap <buffer> <leader>tO :VimTodoListsCreateEmptyLineAbove<CR>
  nnoremap <buffer> <leader>tc :VimTodoListsCreateNewChildItem<CR>
  nnoremap <buffer> <leader>td :VimTodoListsToggleItemDone<CR>
  vnoremap <buffer> <leader>td :VimTodoListsToggleItemDone<CR>
  nnoremap <buffer> <leader>tl :VimTodoListsToggleItemLater<CR>
  vnoremap <buffer> <leader>tl :VimTodoListsToggleItemLater<CR>
  nnoremap <buffer> <leader>tw :VimTodoListsToggleItemWishlist<CR>
  vnoremap <buffer> <leader>tw :VimTodoListsToggleItemWishlist<CR>
  nnoremap <buffer> <leader>tn :VimTodoListsToggleItemNotes<CR>
  vnoremap <buffer> <leader>tn :VimTodoListsToggleItemNotes<CR>
  nnoremap <buffer> <leader>t? :VimTodoListsToggleItemQuestion<CR>
  vnoremap <buffer> <leader>t? :VimTodoListsToggleItemQuestion<CR>
  nnoremap <buffer> <leader>t> :VimTodoListsToggleItemTomorrow<CR>
  vnoremap <buffer> <leader>t> :VimTodoListsToggleItemTomorrow<CR>
  inoremap <buffer> <CR> <CR><ESC>:VimTodoListsCreateNewItem<CR>
  noremap <buffer> <leader>e :silent call VimTodoListsSetNormalMode()<CR>
endfunction

"Plugin startup code
if !exists('g:vimtodolists_plugin')
  let g:vimtodolists_plugin = 1

  if exists('vimtodolists_auto_commands')
    echoerr 'VimTodoLists: vimtodolists_auto_commands group already exists'
    exit
  endif

  "Defining auto commands
  augroup vimtodolists_auto_commands
    autocmd!
    autocmd BufRead,BufNewFile *.todo call VimTodoListsInit()
  augroup end

  "Defining plugin commands
  command! VimTodoListsCreateNewItemAbove silent call VimTodoListsCreateNewItemAbove()
  command! VimTodoListsCreateNewItemBelow silent call VimTodoListsCreateNewItemBelow()

  command! VimTodoListsCreateEmptyLineAbove silent call VimTodoListsCreateEmptyLineAbove()
  command! VimTodoListsCreateEmptyLineBelow silent call VimTodoListsCreateEmptyLineBelow()

  command! VimTodoListsCreateNewChildItem silent call VimTodoListsCreateNewChildItem()

  command! VimTodoListsCreateNewItem silent call VimTodoListsCreateNewItem()

  command! VimTodoListsGoToNextItem silent call VimTodoListsGoToNextItem()
  command! VimTodoListsGoToPreviousItem silent call VimTodoListsGoToPreviousItem()

  command! VimTodoListsSetLabelWork silent call VimTodoListsSetLabel('@work')
  command! VimTodoListsSetLabelOSS silent call VimTodoListsSetLabel('@oss')
  command! VimTodoListsSetLabelPersonal silent call VimTodoListsSetLabel('@personal')
  command! VimTodoListsSetLabelHousehold silent call VimTodoListsSetLabel('@household')

  command! -range VimTodoListsToggleItemDone silent <line1>,<line2>call VimTodoListsToggleItemDone()
  command! -range VimTodoListsToggleItemLater silent <line1>,<line2>call VimTodoListsToggleItemLater()
  command! -range VimTodoListsToggleItemWishlist silent <line1>,<line2>call VimTodoListsToggleItemWishlist()
  command! -range VimTodoListsToggleItemNotes silent <line1>,<line2>call VimTodoListsToggleItemNotes()
  command! -range VimTodoListsToggleItemQuestion silent <line1>,<line2>call VimTodoListsToggleItemQuestion()
  command! -range VimTodoListsToggleItemTomorrow silent <line1>,<line2>call VimTodoListsToggleItemTomorrow()
endif
